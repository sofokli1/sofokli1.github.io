[ { "title": "Interval Timer App", "url": "/posts/interval-timer/", "categories": "Apps", "tags": "app, launch", "date": "2023-10-19 16:42:00 +0200", "snippet": "Supported platforms iOS/iPadOS watchOS tvOS macOSTechnology that went into making this app TCA SwiftUI SPM XcodeGen Xcode Cloud AppIcon and App Store screenshots are generated with SwiftUIElevate Your Workouts with Interval TimerIntroductionDiscover a game-changing fitness companion - Interval Timer. This app redefines High-Intensity Interval Training (HIIT) and Tabata workouts, offering efficiency and customization for all fitness levels.Efficient and Customizable WorkoutsInterval Timer puts you in control with customizable work and rest intervals, repetitions, and sets. Tailor your sessions to match your capabilities and goals, ensuring a workout that’s just right for you.Visual and Auditory Cues for PrecisionStay focused with clear on-screen prompts and customizable sound notifications that guide you through each interval, ensuring you make the most of every session.Seamless Integration into Your RoutineWith its user-friendly interface, Interval Timer effortlessly fits into your daily life. Start your workout with a few taps, whether you’re at the gym, home, or outdoors.ConclusionInterval Timer is the ultimate fitness app for everyone, from beginners to seasoned athletes. Download it now from the App Store and experience a new level of intensity and results in your HIIT and Tabata workouts. Your body will thank you." }, { "title": "How to add SwiftFormat to your Xcode project", "url": "/posts/swiftFormat/", "categories": "Tutorial, Swift", "tags": "tutorial, swift, swiftformat, code, formatting, ios, xcode", "date": "2022-01-02 15:21:00 +0100", "snippet": "Why automatic code formatting? Many programmers have a preferred style for formatting their code, and others seem entirely blind to the existing formatting conventions of a project (to the enragement of their colleagues). When collaborating on a project, it can be helpful to agree on a common coding style, but enforcing that manually is tedious and error-prone, and can lead to arguments if some participants take it more seriously than others. Having a tool to automatically enforce a common style eliminates those issues and lets you focus on the behaviour of the code, not its presentation.Installation using Swift Package Manager and Xcode build phaseNote: Instructions for Cocoapods and other are available in the repoCreate a BuildTools folder &amp;amp; Package.swift Create a folder called BuildTools in the same folder as your .xcodeproj file In this folder, create a file called Package.swift, with the following contents: // swift-tools-version:5.1 import PackageDescription let package = Package( name: &quot;BuildTools&quot;, platforms: [.macOS(.v10_11)], dependencies: [ .package(url: &quot;https://github.com/nicklockwood/SwiftFormat&quot;, from: &quot;0.49.0&quot;), ], targets: [.target(name: &quot;BuildTools&quot;, path: &quot;&quot;)] ) If you are running Xcode 11.4 or later, in the BuildTools folder create a file called Empty.swift with nothing in it. This is to satisfy a change in Swift Package Manager.Add a Build phases to your app target Click on your project in the file list, choose your target under TARGETS, click the Build Phases tab Add a new Run Script phase by clicking the little plus icon in the top left Drag the new Run Script phase above the Compile Sources phase, expand it and paste the following script: # Add here any code that can detect if it is running on CI so that SwiftFormat does not run during CI builds. For CircleCI I use the following: # if $CI == true; then # exit 0 # fi # This will not run the SwiftFormat when builds are initiated from SwiftUI Previews. It can be anoing for the code to change while typing. This will not block SwiftFormat when executing user intitiated builds using CMD+B, CMR+R if [ &quot;${ENABLE_PREVIEWS}&quot; = &quot;YES&quot; ]; then exit 0; fi cd BuildTools SDKROOT=(xcrun --sdk macosx --show-sdk-path) #swift package update #Uncomment this line temporarily to update the version used to the latest matching your BuildTools/Package.swift file swift run -c release swiftformat &quot;$SRCROOT&quot; You can also use swift run -c release --package-path BuildTools swiftformat &quot;$SRCROOT&quot; if you need a more complex script and cd BuildTools breaks stuff. NOTE: You may wish to check BuildTools/Package.swift into your source control so that the version used by your run-script phase is kept in version control. It is recommended to add the following to your .gitignore file: BuildTools/.build and BuildTools/.swiftpmConfigure SwiftFormatSwiftFormat’s configuration is split between rules and options. Rules are functions in the SwiftFormat library that apply changes to the code. Options are settings that control the behavior of the rules.SwiftFormat includes over 50 rules, and new ones are added all the time. An up-to-date list can be found in Rules along with documentation on how they are used.Rules can be either enabled or disabled. Most are enabled by default. Disabled rules are marked with “(disabled)” in the docs. Create a file named config.swiftformat in the source root folder of your project. Here we will put all the rules that we want to enable or disable. In the Run Script created above, append to the last line the configurations so that the SwiftFormat knows how to behave. It should look like this now:swift run -c release swiftformat &quot;$SRCROOT&quot; --config &quot;$SRCROOT/config.swiftformat&quot; As a starting point you can use my configuration file but you can find all possible configurations in the repo with very detailed explanations. Just paste the following in config.swiftformat In each line I have added a link to the detailed explanation for the rules # format options --allman false # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#braces --indent 4 # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#indent --header strip # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#fileheader --self init-only # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#redundantself --wraparguments before-first # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wraparguments --wrapparameters before-first # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wraparguments --wrapcollections before-first # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wraparguments --wrapreturntype if-multiline # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wraparguments --wrapconditions before-first # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wraparguments --funcattributes prev-line # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wrapattributes --typeattributes prev-line # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wrapattributes --varattributes same-line # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#wrapattributes --marktypes never # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#markTypes # file options --swiftversion 5.3 # this is used to specify the swift version so that the rules behave acordingly for that version of swift # --exclude Pods,&quot;**/API.swift&quot;,BuildTools # exclude code that is autogenerated from other tools or third party dependencies # rules --disable preferKeyPath # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#preferKeyPath --disable initCoderUnavailable # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#initCoderUnavailable --enable markTypes # https://github.com/nicklockwood/SwiftFormat/blob/master/Rules.md#markTypes To set a specific option for a rule (if it is different from the default one) just state the rule and the option after it with a space. Ex: --indent 4 this will set indentation to 4 spaces and can be changed to whatever value, or set it like --indent tab to use tabs instead of space. To disable a rule that is enabled by default just type --disable preferKeyPath. This will disable the preferKeyPath rule. To enable a rule that is disable by default just type --enable markTypes. This will enable the markTypes rule To exclude files from the formatter altogether, like the whole Pods folder, just type --exclude Pods. you can add more paths separated by comma to the same line like this --exclude Pods,&quot;**/API.swift&quot;,BuildTools To avoid automatically opting-in to new rules when SwiftFormat is updated, use the–rules argument to only enable the rules you specify --rules indent,linebreaks Hit build and you should see the code change immediately. It may take a few seconds the first time but it is super fast thereafter since it only runs on files that have changes in git.ExampleBeforefunc someFunction(param1: String , param2 : Int , param3: AnyObject) { [1 ... param2].forEach( { val in print ( val) } ) return}Afterfunc someFunction( param1 _: String, param2: Int, param3 _: AnyObject) { [1 ... param2].forEach { val in print(val) }}" } ]
